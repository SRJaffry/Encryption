import string
import random

class Enctyption_decryption():

    def __init__(self):

        self.text = 0

        self.chars = list(" " + string.ascii_letters + string.punctuation + string.digits)
        self.seed = 100
        self.key = self.chars.copy()
        
        random.seed(self.seed)
        random.shuffle(self.key)
        
        self.encrypted_txt = ""
        self.decrypted_text = ""
    
    def get_input(self):
        self.text = input("Enter the text to be encrypted/decrypted: ")

    def decrypt_func(self, encrypted_txt, seed=0):
        """
        Decrypts an encrypted text using a specific random seed to generate a key.
        
        Args:
            encrypted_txt (str): The encrypted text to be decrypted. 
            It should only contain characters from the allowed character set.
            
            seed (int, optional): The seed value for the random number generator. 
            Defaults to 0. Using the same seed as during encryption will produce the correct decryption.

        Returns:
            str: The decrypted text. This is the original plain text that was encrypted.
        """        
        # Initialize an empty string to store the decrypted text
        self.decrypted_text = ""

        # Iterate through each character in the encrypted text
        for letter in encrypted_txt:
            # Find the index of the character in the shuffled key
            idx = self.key.index(letter)
            
            # Append the corresponding character from the original character set to the decrypted text
            self.decrypted_text += self.chars[idx]

        # Return the decrypted text
        return self.decrypted_text

    def encrypt_func(self, plain_txt, seed=0):
        """
        Encrypts a plain text using a specific random seed to generate a key.
        
        Args:
            plain_txt (str): The plain text to be encrypted. It should only contain characters from the allowed character set.
            
            seed (int, optional): The seed value for the random number generator. Defaults to 0. 
            Using the same seed for encryption and decryption ensures that decryption will be correct.

        Returns:
            str: The encrypted text. This text is generated by mapping each character in the plain text to a different character using the shuffled key.
        """
        # Define the character set including space, letters, punctuation, and digits
        
        # Initialize an empty string to store the encrypted text
        self.cipher_txt = ""

        # Iterate through each character in the plain text
        for letter in plain_txt:
            # Find the index of the character in the original character set
            idx = self.chars.index(letter)
            
            # Append the corresponding character from the shuffled key to the encrypted text
            self.cipher_txt += self.key[idx]

        # Return the encrypted text
        return self.cipher_txt

def main():
    obj = Enctyption_decryption()

    obj.get_input()
    print()

    encrypt_ = obj.encrypt_func(obj.text)
    print(encrypt_)

    print("--decryption--")

    decrypt = obj.decrypt_func(encrypt_)
    print(decrypt)


if __name__ == "__main__":
    main()


